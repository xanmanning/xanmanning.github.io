<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-13T16:20:07+01:00</updated><id>http://localhost:4000/</id><title type="html">Xan Manning</title><subtitle>Ramblings of a Linux geek and cloud fanatic dabbling in DevOps!</subtitle><author><name>Xan Manning</name></author><entry><title type="html">Git for Non-Developers</title><link href="http://localhost:4000/2018/05/06/git-for-non-developers.html" rel="alternate" type="text/html" title="Git for Non-Developers" /><published>2018-05-06T15:49:22+01:00</published><updated>2018-05-06T15:49:22+01:00</updated><id>http://localhost:4000/2018/05/06/git-for-non-developers</id><content type="html" xml:base="http://localhost:4000/2018/05/06/git-for-non-developers.html">&lt;p&gt;I have been thinking about this for quite a while, particularly as I am in the
middle of contributing to a project at work to combine our multiple knowledgebases
into a single repository of runbooks.&lt;/p&gt;

&lt;p&gt;We’ve chosen to resolve our fractured information repositories into a central
git repository. Each runbook is written in Markdown.&lt;/p&gt;

&lt;h2 id=&quot;so-why-use-git-on-github-and-markdown&quot;&gt;&lt;em&gt;So why use Git (on GitHub) and Markdown?&lt;/em&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Runbooks live close to the code, eventually commonly used runbooks can
become Ansible playbooks.&lt;/li&gt;
  &lt;li&gt;Markdown is fairly easy to learn, you don’t need to know how to code to
contribute.&lt;/li&gt;
  &lt;li&gt;Markdown is still ledgible when not rendered.&lt;/li&gt;
  &lt;li&gt;Every contributor and consumer has a full copy of the repository offline
so should be able to read their content in a datacenter where there is no
internet connectivity available.&lt;/li&gt;
  &lt;li&gt;Contributors have to follow a workflow that means the content is peer
reviewed before being able to merge into the master branch.&lt;/li&gt;
  &lt;li&gt;Every document is versioned and changes audited with &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Multiple people can contribute to a single runbook prior to publication
and the merging of their work is handled well.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-challenges-have-been-faced&quot;&gt;&lt;em&gt;What challenges have been faced?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Needless to say there is a period of adjustment required. With our knowledge and
experiences “documented” loosly in Google Sites pages, wikis, support tickets,
notes on people’s desks and in our heads - every person has their own workflow
for “documentation”.&lt;/p&gt;

&lt;p&gt;What we need to consider is that the content of this documentation is very
technical in nature and written by some very skilled individuals, but written
by individuals who don’t write a lot of code day-to-day and may not have used
git before. What problems does this cause?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Git has a steep learning curve when starting off, understanding the workflow
takes a significant commitment of time. This time commitment is not easy
to fulfil when working in Operations or Consultancy.&lt;/li&gt;
  &lt;li&gt;Git has its roots in development, after all Linus Torvalds wrote it to
fulfil an SCM role in Linux Kernel Development. The workflows have to be
explained and adapted slightly differently for writting documentation.&lt;/li&gt;
  &lt;li&gt;Tooling is tricky, GUIs can be a bit hit and miss with the level of control
over your project. CLI isn’t as easy to set up on Windows as on Linux/MacOS.&lt;/li&gt;
  &lt;li&gt;Rendering of Markdown locally can differ from the rendering on GitHub.&lt;/li&gt;
  &lt;li&gt;There are a lot of steps in the process to publish a document.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-can-we-do-to-make-things-easier&quot;&gt;&lt;em&gt;What can we do to make things easier?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;William Chia, GitLab, presented “Empowering non-developers to use Git” at
Git Merge 2018. Chia reduced the problem down into 3 requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Something to version&lt;/li&gt;
  &lt;li&gt;Somewhere to publish&lt;/li&gt;
  &lt;li&gt;Some way to stop explosions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ve already established points 1. and 2. - We are versioning runbooks and then
we are publishing to GitHub. What we have started looking at but not perfected
is point 3.&lt;/p&gt;

&lt;p&gt;Point 3. is currenlty being managed by manual steps, which is fine, but it takes
a lot of engineer time and commitment. Mistakes can also be made and a non-consistent,
“ad-hoc” process is used.&lt;/p&gt;

&lt;p&gt;How can we start delving into stopping explosions? We can reduce the engineer hours
involved in publishing content by
&lt;a href=&quot;https://github.com/markdownlint/markdownlint&quot;&gt;linting&lt;/a&gt;, &lt;a href=&quot;http://aspell.net/&quot;&gt;spellchecking&lt;/a&gt;*, ensuring the correct template was used,
etc.&lt;/p&gt;

&lt;p&gt;This becomes part of our Continuous Integration (CI) strategy, and starts to
drive the behaviours for writing more consistent runbook entries (in sourcecode
and content).&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;* spellchecking is not always easy in technical documents&lt;/em&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-do-we-go-once-we-have-implemented-continuous-integration&quot;&gt;&lt;em&gt;Where do we go once we have implemented continuous integration?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;As mentioned above with point 3. we are starting to look at continuous integration
to stop our explosions.&lt;/p&gt;

&lt;p&gt;We can actually re-iterate on the problem by looking back at point 2. and how
we publish. We are relying on GitHub as a platform to publish on, making use of
the markdown to HTML conversion that goes on in the background against a GitHub
repository.&lt;/p&gt;

&lt;p&gt;This is great, but not everyone in the organisation will use GitHub to consume
content. How might we tackle this?&lt;/p&gt;

&lt;p&gt;GitHub actually supports hosting websites (like this one), written in markdown
but presented in converted HTML. This is done using a Static Site Generator
(SSG), such as &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; or
&lt;a href=&quot;https://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are even SSGs that are designed for formatting technical documentation.
Take a look at &lt;a href=&quot;http://www.sphinx-doc.org/en/master/&quot;&gt;Sphinx&lt;/a&gt; or
&lt;a href=&quot;http://www.mkdocs.org/&quot;&gt;MkDocs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So there are tools to build our markdown as a site, whilst we are already
checking the sourcecode with our CI solution, we can then start deploying it
automatically. So begins our possible new Continuous Delivery (CD) strategy.&lt;/p&gt;

&lt;h2 id=&quot;video-on-youtube&quot;&gt;Video on YouTube&lt;/h2&gt;

&lt;p&gt;Below is the full video of William Chia’s talk, which quite accurately describes
the issues face when non-technical (or even non-development) users are asked to
work in git. The video gives a taste of the solutions used at GitLab.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pY5i0Io86UQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Xan Manning</name></author><summary type="html">I have been thinking about this for quite a while, particularly as I am in the middle of contributing to a project at work to combine our multiple knowledgebases into a single repository of runbooks.</summary></entry><entry><title type="html">First post of 2018</title><link href="http://localhost:4000/2018/05/03/first-post-of-2018.html" rel="alternate" type="text/html" title="First post of 2018" /><published>2018-05-03T19:12:59+01:00</published><updated>2018-05-03T19:12:59+01:00</updated><id>http://localhost:4000/2018/05/03/first-post-of-2018</id><content type="html" xml:base="http://localhost:4000/2018/05/03/first-post-of-2018.html">&lt;p&gt;I am still alive, honest! I’ve just been super busy being a geek. I’m still
trying to continue my AWS education but this has been put on hold for some Azure
training. I’m slowly becoming quite cloud agnostic and trying to be smart with
it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So here’s a rundown of what I have been doing over the past 6 months…&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Refining my Ansible skills (mainly for work).&lt;/li&gt;
  &lt;li&gt;Playing with Terraform (personally more than professionally).&lt;/li&gt;
  &lt;li&gt;Learning more about Azure through training and &lt;abbr title=&quot;Behavior Driven Development&quot;&gt;BDD&lt;/abbr&gt; (very recent)&lt;/li&gt;
  &lt;li&gt;Provisioning my own services using the infrastructure-as-code tools across
AWS, Azure and Digital Ocean (GCP to follow). I’ve created my own networks,
defined my VPNs (Tinc), carved up my subnets and set up some DNS.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, as I proclaim. I’m doing, but I’m not posting anything particularly
interesting yet. I don’t have much to really show apart from odd bits of boring
ansible output.&lt;/p&gt;

&lt;p&gt;I may draw the odd network diagram to describe what I have built for my cloud “lab”
environments. I may release some of the roles I have written, especially anything
that might be generic and helpful enough.&lt;/p&gt;

&lt;p&gt;For now, you’ll have to just settle for some Ansible output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/05/ansible_controller.png&quot; alt=&quot;Ansible controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure1: Ansible Controller login&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/05/ansible_provision_controller.png&quot; alt=&quot;Ansible Provisioning Controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure2: Ansible provision controller playbook&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;oh-yeh-i-got-my-black-belt&quot;&gt;Oh yeh! I got my black belt!&lt;/h2&gt;

&lt;p&gt;Also, my wife and I got our next grade in karate, December 2017.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/05/black_belt.jpg&quot; alt=&quot;Black Belts!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure3: Black belt!!! Wife blurred out to protect her identity ;)&lt;/em&gt;&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">I am still alive, honest! I’ve just been super busy being a geek. I’m still trying to continue my AWS education but this has been put on hold for some Azure training. I’m slowly becoming quite cloud agnostic and trying to be smart with it.</summary></entry><entry><title type="html">Auto Shutdown AWS EC2s with Lambda, CloudWatch (and Terraform)</title><link href="http://localhost:4000/2017/11/27/auto-shutdown-ec2s-lambda-terraform.html" rel="alternate" type="text/html" title="Auto Shutdown AWS EC2s with Lambda, CloudWatch (and Terraform)" /><published>2017-11-27T18:02:11+00:00</published><updated>2017-11-27T18:02:11+00:00</updated><id>http://localhost:4000/2017/11/27/auto-shutdown-ec2s-lambda-terraform</id><content type="html" xml:base="http://localhost:4000/2017/11/27/auto-shutdown-ec2s-lambda-terraform.html">&lt;p&gt;Today we are looking at how to automatically shut down EC2 instances at the
end of the day automatically using a combination of Lambda and CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/lambda_ec2_shutdown.png&quot; alt=&quot;Lambda Function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR I’ve written a ‘stop EC2’ Lambda function that is deployable with
Terraform to get you started, I’ve not made a ‘start EC2’ Lambda function yet.
Future improvements, I’d like to programmatically schedule instances using tags.
Clone from: &lt;a href=&quot;https://github.com/xanmanning/terraform-autostop&quot;&gt;github.com/xanmanning/terraform-autostop&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What we will end up with is a simple Lambda function that will search all of
our regions and automatically send the &lt;code class=&quot;highlighter-rouge&quot;&gt;stop-instances&lt;/code&gt; command to anything
that is still running after 8:00pm.&lt;/p&gt;

&lt;p&gt;To do this I will also be using &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; as the
process is then repeatable and can be versioned in git. I am fairly new to
Terraform but I honestly cannot understand how I ever survived without it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/doyoueventerraform.jpg&quot; alt=&quot;Do you even Terraform?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been asked on numerous occasions, at different employers “How do I stop
(and start) Amazon EC2 instances at regular intervals?”, and I stumbled upon an
article written by AWS that uses
&lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/start-stop-lambda-cloudwatch/&quot;&gt;Lambda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now this knowledge base article is quite basic, you effectively write two Lambda
functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Shut down a specific instance&lt;/li&gt;
  &lt;li&gt;Start a specific instance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You then use the time based event in CloudWatch to trigger this Lambda function.
It’s kind of like writing a Python script on your VM and triggering it in cron -
although you obviously cannot power on that machine with cron. I started looking
at other solutions and came across this guide December 2016 when exploring
turning development EC2 instances of an API platform off and on to a schedule:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://s3.amazonaws.com/solutions-reference/ec2-scheduler/latest/ec2-scheduler.pdf&quot;&gt;EC2 Scheduler Implementation Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s great, but with a need to use a DynamoDB table it felt over engineered
for what we needed at the time. What I wanted was something in the middle of
these two solutions - scheduling tagged instances without a database.&lt;/p&gt;

&lt;p&gt;Sadly, I was not able to build a solution due to a need to change employment.&lt;/p&gt;

&lt;p&gt;Fast forward to November 2017 and I have been asked again for my thoughts on
using Lambda functions for scheduling EC2s. For my own proof of concept I wanted
to programmatically look for EC2 instances in any AWS region that is tagged for
automatic shutdown. For an EC2 to be automatically shut down at the end of the
day (8:00pm) the EC2 requires the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoShutdown: True&lt;/code&gt;. Below is the
Python 2.7 Lambda function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Autostop EC2 Lambda POC script.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# xmanning - 2017&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_function&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Poweroff time (24h format)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;poweroff_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Set to false if we aren't debugging on a local machine.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;local_debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# StopEC2 Object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StopEC2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# initialize required EC2 client and configuration&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ec2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_stop_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Return a list of regions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;regions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_info&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Regions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;regions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RegionName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regions&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_regions_ec2_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_stop_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ec2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy_regions_ec2_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_ec2s_per_region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'================================================'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'  Scanning Regions for stoppable EC2 instances  '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'================================================'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Key:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'  +  EC2s with AutoStop Tag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'  -  EC2s to be ignored'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_regions_ec2_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'------------------------------------------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'EC2s running in {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'------------------------------------------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Reservations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reservation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Instances'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'State'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'running'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No Name&quot;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;autostop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Tags'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Tags'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'AutoStop'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'True'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;autostop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;
                                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_stop_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'InstanceId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'  {}  {} ({})'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autostop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'InstanceId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'================================================'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'            Running Stop Proceedure!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'================================================'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_regions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_stop_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'------------------------------------------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Stopping: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_stop_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'------------------------------------------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ec2_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstanceIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_stop_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy_regions_ec2_clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StopEC2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poweroff_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_ec2s_per_region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'It is not power off time! (&amp;gt;={})'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poweroff_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now as mentioned, I like to use Terraform for managing my AWS infrastructure.
It means I can spin up and tear down all my musings at a moments notice. There
is one thing to note with AWS Lambda and Terraform, loading a function is not
quite as straight forward as pointing your Terraform config to a .py file. You
either have to upload the script to an S3 bucket or archive it into a .zip file
to which you need to work out the sha256 hash of that file. Luckily Terraform
will work out this hash but creating/updating the .zip file is a bit of a pain.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_lambda_function&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stop_ec2_instances&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.lambda_stop_ec2_payload.zip&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function_name&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stop_ec2_instances&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Shuts down unused EC2 instances.&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${aws_iam_role.lambda_start_stop_ec2.arn}&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stop_ec2.lambda_handler&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source_code_hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${base64sha256(file(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lambda_stop_ec2_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;))}&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;python2.7&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this I have created a simple bash script that wraps around the Terraform
binary. I recommend this as it will speed up your workflow for deploying to
Lambda. My bash script works by firstly compressing the Python scripts in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;payloads/&lt;/code&gt; directory and then runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform plan/apply&lt;/code&gt; functions -
on the fly generating the .zip files and the associated has for upload to
AWS Lambda.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build_payloads&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    info &lt;span class=&quot;s2&quot;&gt;&quot;Building payload files.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;__PWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;payloads
    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;file &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        info &lt;span class=&quot;s2&quot;&gt;&quot;Adding &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to .lambda_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_payload.zip&quot;&lt;/span&gt;
        zip &lt;span class=&quot;nt&quot;&gt;-r9&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../.lambda_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_payload.zip&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            fatal &lt;span class=&quot;s2&quot;&gt;&quot;Could not build payload files&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;__PWD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to clone &lt;a href=&quot;https://github.com/xanmanning/terraform-autostop&quot;&gt;my repository&lt;/a&gt;
and play with the Lambda function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/xanmanning/terraform-autostop&quot;&gt;https://github.com/xanmanning/terraform-autostop&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;future-improvements&quot;&gt;Future improvements&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Change the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoShutdown: True&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;PowerSchedule: 0800;2000&lt;/code&gt;
(08:00am - 20:00pm)&lt;/li&gt;
  &lt;li&gt;Create a Start function that also reads the &lt;code class=&quot;highlighter-rouge&quot;&gt;PowerSchedule&lt;/code&gt; tag.&lt;/li&gt;
  &lt;li&gt;Have the option for a ‘default’ schedule for untagged instances.&lt;/li&gt;
  &lt;li&gt;Exempt EC2s for Stop/Start with a specific tags, eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;Production&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;a href=&quot;http://www.paramiko.org/&quot;&gt;Paramiko&lt;/a&gt; support for running commands after
EC2 start or before EC2 stop.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/premiumsupport/knowledge-center/start-stop-lambda-cloudwatch/&quot;&gt;https://aws.amazon.com/premiumsupport/knowledge-center/start-stop-lambda-cloudwatch/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://s3.amazonaws.com/solutions-reference/ec2-scheduler/latest/ec2-scheduler.pdf&quot;&gt;https://s3.amazonaws.com/solutions-reference/ec2-scheduler/latest/ec2-scheduler.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/compute/scheduling-ssh-jobs-using-aws-lambda/&quot;&gt;https://aws.amazon.com/blogs/compute/scheduling-ssh-jobs-using-aws-lambda/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xan Manning</name></author><summary type="html">Today we are looking at how to automatically shut down EC2 instances at the end of the day automatically using a combination of Lambda and CloudWatch.</summary></entry><entry><title type="html">Switched to Jekyll</title><link href="http://localhost:4000/2017/11/26/switched-to-jekyll.html" rel="alternate" type="text/html" title="Switched to Jekyll" /><published>2017-11-26T12:35:32+00:00</published><updated>2017-11-26T12:35:32+00:00</updated><id>http://localhost:4000/2017/11/26/switched-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/11/26/switched-to-jekyll.html">&lt;p&gt;As yoy may have noticed I’ve migrated my blog from Ghost to Jekyll. Please
do not be alarmed! As I am not able to put significant time into keeping a
server running nginx and Ghost up to date with security updates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/11/jekyll_logo.png&quot; alt=&quot;Jekyll&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So why choose Jekyll? It’s still markdown, it can be pretty and the output is
static HTML. I no longer have a node.js application and database to worry about,
at the moment all I have is the nginx webserver to keep on top of which can be
automatically updated.&lt;/p&gt;

&lt;p&gt;The more astute individual will notice the updated SSL certificate! I’ve moved
to Let’s Encrypt following the expiry of my old certificate. All automated,
one less thing to worry about.&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">As yoy may have noticed I’ve migrated my blog from Ghost to Jekyll. Please do not be alarmed! As I am not able to put significant time into keeping a server running nginx and Ghost up to date with security updates.</summary></entry><entry><title type="html">UNIX-ing as a Linux Geek</title><link href="http://localhost:4000/2017/09/23/unix-ing-as-a-linux-geek.html" rel="alternate" type="text/html" title="UNIX-ing as a Linux Geek" /><published>2017-09-23T15:56:30+01:00</published><updated>2017-09-23T15:56:30+01:00</updated><id>http://localhost:4000/2017/09/23/unix-ing-as-a-linux-geek</id><content type="html" xml:base="http://localhost:4000/2017/09/23/unix-ing-as-a-linux-geek.html">&lt;p&gt;So my background is mostly in GNU/Linux, I’ve ditched Windows long ago and I still dabble with Mac OS X (though an older version). Since February I have been doing a bit of work on IBM AIX systems, particularly with PowerHA (HACMP) clusters. I’m not going to pretend to be an expert but I have found using UNIX almost like speaking a strange dialect or creole. Everything is so similar and yet so very different.&lt;/p&gt;

&lt;p&gt;It’s not surprising that this is the case because of the exciting history of UNIX and the emergence of &lt;a href=&quot;https://www.gnu.org/gnu/manifesto.html&quot;&gt;GNU&lt;/a&gt; (GNU’s Not UNIX) and &lt;a href=&quot;http://engineering2.berkeley.edu/labnotes/history_unix.html&quot;&gt;BSD&lt;/a&gt; (Berkeley Software Distribution of UNIX). Unsuprisingly, packages are regularly ported between GNU/Linux and BSD. Even more surprising is seeing the odd GNU package on IBM AIX.&lt;/p&gt;

&lt;p&gt;Since 2016 I’ve been dipping my toes into &lt;a href=&quot;https://www.openbsd.org/&quot;&gt;OpenBSD&lt;/a&gt; and to help myself get started I have been reading &lt;a href=&quot;https://www.amazon.co.uk/Absolute-OpenBSD-Unix-Practical-Paranoid/dp/1593274769&quot;&gt;Absolute OpenBSD: UNIX for the Practical Paranoid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/09/20170923_124242_Cropped.jpg&quot; alt=&quot;Absolute BSD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve not finished this book, however I have to highlight its value. I’m not going to spoil any of the wit and humour for what should be a dry read, however the real value I have found looking at the inner workings of the OpenBSD operating system’s configuration.&lt;/p&gt;

&lt;p&gt;How does this help a Linux geek? Actually a surprising lot. There are a number of useful tips on running a secure and stable OpenBSD server, however a lot of these tips can translate into GNU/Linux.&lt;/p&gt;

&lt;p&gt;Good examples you can take with you on your GNU/Linux, BSD and UNIX journey include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Partitioning disks&lt;/li&gt;
  &lt;li&gt;Permissions&lt;/li&gt;
  &lt;li&gt;User accounts, user limits&lt;/li&gt;
  &lt;li&gt;Sudoer files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more areas covered, I’ve just named a few. If you’re having to switch between different UNIX-like OS, it is definately worth reading and dabbling into unfamiliar technology. You might learn something about your own yard!&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">So my background is mostly in GNU/Linux, I’ve ditched Windows long ago and I still dabble with Mac OS X (though an older version). Since February I have been doing a bit of work on IBM AIX systems, particularly with PowerHA (HACMP) clusters. I’m not going to pretend to be an expert but I have found using UNIX almost like speaking a strange dialect or creole. Everything is so similar and yet so very different.</summary></entry><entry><title type="html">Clean up old Docker images</title><link href="http://localhost:4000/2017/09/16/clean-up-docker-hosts.html" rel="alternate" type="text/html" title="Clean up old Docker images" /><published>2017-09-16T13:10:19+01:00</published><updated>2017-09-16T13:10:19+01:00</updated><id>http://localhost:4000/2017/09/16/clean-up-docker-hosts</id><content type="html" xml:base="http://localhost:4000/2017/09/16/clean-up-docker-hosts.html">&lt;p&gt;Sorry for not posting in a while, I have been a bit busy. Here’s a quick tip.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Ideally when running in the cloud we want to be able to ditch our VMs when they misbehave rather than trying to fix them. Reincarnate, don’t resurrect.&lt;/p&gt;

&lt;p&gt;For me, however, I am running a single VM (Digital Ocean Droplet) with Docker. I want to be able to recreate my droplet very quickly should things go wrong, but I don’t care much about 100% uptime on my personal server. The issue with this approach is that my SSD fills up quickly with multiple Docker image layers.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;Despite my droplet being fairly quick to restore, this would be overkill for a simple ‘disk full’ issue. I reclaim my disk space using the &lt;code class=&quot;highlighter-rouge&quot;&gt;prune&lt;/code&gt; functions in Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The aggressive approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will clean up everything that is unused, use with caution.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker system prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can be more specific with these commands, pruning individual unused Docker objects&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker container prune
# docker image prune
# docker network prune
# docker volume prune
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;https://docs.docker.com/engine/reference/commandline/system_prune/&lt;/li&gt;
  &lt;li&gt;https://docs.docker.com/engine/admin/pruning/#prune-everything&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Xan Manning</name></author><summary type="html">Sorry for not posting in a while, I have been a bit busy. Here’s a quick tip.</summary></entry><entry><title type="html">Best Practice for Mounting an LVM Logical Volume with /etc/fstab</title><link href="http://localhost:4000/2017/05/29/best-practice-for-mounting-an-lvm-logical-volume-with-etc-fstab.html" rel="alternate" type="text/html" title="Best Practice for Mounting an LVM Logical Volume with /etc/fstab" /><published>2017-05-29T17:43:39+01:00</published><updated>2017-05-29T17:43:39+01:00</updated><id>http://localhost:4000/2017/05/29/best-practice-for-mounting-an-lvm-logical-volume-with-etc-fstab</id><content type="html" xml:base="http://localhost:4000/2017/05/29/best-practice-for-mounting-an-lvm-logical-volume-with-etc-fstab.html">&lt;p&gt;If you’ve been using Linux for a bit you will be familiar with the file systems table (&lt;a href=&quot;http://man7.org/linux/man-pages/man5/fstab.5.html&quot;&gt;fstab(5)&lt;/a&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt;). You will also be fairly familiar with the contents of this file and it’s structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;device&amp;gt; &amp;lt;mount-point&amp;gt; &amp;lt;filesystem-type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So a typical entry may possibly look like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/dev/sda1  /  ext4  defaults  0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would mount &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt;, the device file for the first partition on the first disk as the root (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) on your Linux system.&lt;/p&gt;

&lt;p&gt;Now you have possibly seen a problem… this device might change names and no longer be &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt; next boot. Imagine performing an install from a live CD, the mappings of devices might change between booting the live CD and booting from the hard disk.&lt;/p&gt;

&lt;p&gt;If you looked at your &lt;em&gt;actual&lt;/em&gt; fstab, you will notice that instead of devices being identified by &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/sdx&lt;/code&gt;, you will see the use of UUIDs. This method is considered the safest and most reliable way of mounting a plain old block device.&lt;/p&gt;

&lt;p&gt;To find a UUID, simply run the &lt;code class=&quot;highlighter-rouge&quot;&gt;blkid&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# blkid /dev/sda1
/dev/sda1 UUID=&quot;15983cac-77bc-46b1-9f79-cb180e438a64&quot; TYPE=&quot;ext4&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your fstab now looks more like this, using UUID to identify the filesystem we wish to mount:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UUID=15983cac-77bc-46b1-9f79-cb180e438a64  /  ext4  defaults  0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lvm&quot;&gt;LVM&lt;/h2&gt;

&lt;p&gt;Let’s think about an example logical volume, 10 GB spread across a 16 GB volume group composed of two 8 GB disks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/blk_and_df.png&quot; alt=&quot;LVM Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now there is the temptation to put the UUID entry into your fstab.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# lsblk -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/lsblkF.png&quot; alt=&quot;lsblk -f&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using this UUID in your fstab, you will be able to mount the filesystem consistently, surely? It’s the best practice for mounting any other volume:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UUID=cefcdc28-ac6b-4a26-a14e-e27724489c52  /backup  ext4  defaults  0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Alas, no.&lt;/p&gt;

&lt;p&gt;Why?.. &lt;strong&gt;&lt;em&gt;Snapshots&lt;/em&gt;&lt;/strong&gt;. This problem also applies for filesystems that support snapshots such as zfs.&lt;/p&gt;

&lt;p&gt;I’ll demonstrate now by creating a snapshot of my logical volume and then re-run the command for finding the UUID.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/snapshotsProblem.png&quot; alt=&quot;Snapshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you may have noticed, the original volume and the snapshot have &lt;em&gt;exactly the same UUID&lt;/em&gt;. If I add this UUID to my fstab now, &lt;code class=&quot;highlighter-rouge&quot;&gt;umount&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt;; the snapshot volume will mount to &lt;code class=&quot;highlighter-rouge&quot;&gt;/backup&lt;/code&gt;. This is potentially not the behavior we want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/snapshotMounted.png&quot; alt=&quot;Snapshot Mounted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what do we do? What goes into our fstab? Let’s look at the options available to us on this openSUSE VM. We have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/vg_test-lv_test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vg_test/lv_test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/dm-#&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On more modern Linux OS, the top 2 options are the same, a symlink to the device file &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/dm-#&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/dm-1&lt;/code&gt; in my example).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/symlink_devdm.png&quot; alt=&quot;/dev/dm-1 Symlink&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We shouldn’t reference &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/dm-1&lt;/code&gt; in our fstab though as this reference is not persistent on reboot. We cam also have an increase or decrease in the number of device-mapper device files when we make snapshots. Additionally volumes will likely move around when re-discovered by device-mapper on boot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/devdms.png&quot; alt=&quot;Multiple /dev/dm-#s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what the heck &lt;em&gt;do&lt;/em&gt; we use? Despite going against what was previously said in the introduction, either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/vg_test-lv_test&lt;/code&gt; or&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vg_test/lv_test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preferably &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/vg_test-lv_test&lt;/code&gt; as this used to be where device-mapper &lt;a href=&quot;https://superuser.com/a/559478&quot;&gt;originally&lt;/a&gt; created the device file, (instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/dm-#&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I would also recommend using the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/vg_test-lv_test&lt;/code&gt; because I have also had experiences of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vg_test/lv_test&lt;/code&gt; symlink going missing during a reboot and requiring emergency console access.&lt;/p&gt;

&lt;p&gt;On older systems, &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/vg_test-lv_test&lt;/code&gt; is more likely to be persistent than &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/vg_test/lv_test&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When adding a device to fstab, unless you are using LVM or a filesystem that supports snapshots*, use the UUID.&lt;/p&gt;

&lt;p&gt;When using LVM, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/mapper/vg_volgrp-lv_logvol&lt;/code&gt; device file (or symlink for later Linux OS).&lt;/p&gt;

&lt;p&gt;&lt;small&gt;*btrfs users, carry on using UUID but specify the subvolume name.&lt;/small&gt;&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">If you’ve been using Linux for a bit you will be familiar with the file systems table (fstab(5): /etc/fstab). You will also be fairly familiar with the contents of this file and it’s structure:</summary></entry><entry><title type="html">Azure, an AWS guy dipping his toes.</title><link href="http://localhost:4000/2017/05/22/azure-an-aws-guy-dipping-his-toes.html" rel="alternate" type="text/html" title="Azure, an AWS guy dipping his toes." /><published>2017-05-22T18:43:00+01:00</published><updated>2017-05-22T18:43:00+01:00</updated><id>http://localhost:4000/2017/05/22/azure-an-aws-guy-dipping-his-toes</id><content type="html" xml:base="http://localhost:4000/2017/05/22/azure-an-aws-guy-dipping-his-toes.html">&lt;p&gt;I am not going to lie, I am a big fan of AWS. I have been using AWS on and off for nearly 2 years now. I’ve done the training for both the AWS Solutions Architect Associate and SysOps Associate (although not got a certification &lt;em&gt;yet&lt;/em&gt;). Shout out to &lt;a href=&quot;https://acloud.guru/&quot;&gt;acloud.guru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whilst there are no shortage of AWS jobs out there, depending on your industry it potentially pays to become cloud agnostic - having a finger in each of the cloud provider’s pies (AWS, Azure, DigitalOcean, Google Cloud). What becomes difficult is understanding the concepts of cloud hosting and the terminology associated with them. Amazon in particular has a fantastic way of over-complicating the name of their products so moving between AWS and Azure (for example) can feel a bit confusing. I feel Azure does a better job of naming their resources, but it’s ultimately just &lt;em&gt;different&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s dive in with just looking at the most basic of cloud resources, our networking and compute resources and compare their terminologies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/AWSvsAzure.png&quot; alt=&quot;AWS vs. Azure&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Amazon Web Services&lt;/th&gt;&lt;th&gt;Azure&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;Resource Group&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Region&lt;/td&gt;&lt;td&gt;Location&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Availability Zone&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;IAM (Identity Access Management)&lt;/td&gt;&lt;td&gt;Azure Active Directory&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;VPC (Virtual Private Cloud)&lt;/td&gt;&lt;td&gt;Virtual Network&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Subnet&lt;/td&gt;&lt;td&gt;Subnet&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Security Group&lt;/td&gt;&lt;td&gt;Network Security Group&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Elastic IP&lt;/td&gt;&lt;td&gt;Public IP&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Route 53&lt;/td&gt;&lt;td&gt;Azure DNS&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;EC2 (Elastic Cloud Compute)&lt;/td&gt;&lt;td&gt;Virtual Machine&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;EBS (Elastic Block Storage)&lt;/td&gt;&lt;td&gt;Page Blob&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;S3 (Simple Storage Solution)&lt;/td&gt;&lt;td&gt;Block Blob&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;EFS (Elastic File System)&lt;/td&gt;&lt;td&gt;Azure File Storage&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Auto-Scaling Group&lt;/td&gt;&lt;td&gt;Autoscale&lt;br /&gt;Virtual Machine Scale Sets&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ELB (Elastic Load Balancer)&lt;br /&gt;ALB (Application Load Balancer)&lt;/td&gt;&lt;td&gt;Load Balancer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CloudFormation&lt;/td&gt;&lt;td&gt;Resource Group Manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CloudFront&lt;/td&gt;&lt;td&gt;Azure CDN&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Cloud Watch&lt;/td&gt;&lt;td&gt;Azure Portal&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Lambda&lt;/td&gt;&lt;td&gt;Web Jobs&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;small&gt;Source: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services&quot;&gt;Microsoft, AWS to Azure services comparison&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;As you can see, for the most part, they are fairly self explanatory. I can see that the biggest mixup would be in the storage solutions where the term ‘block’ may become misleading.&lt;/p&gt;

&lt;p&gt;Next post on this matter I shall be looking into Google Cloud Platform and eventually I shall lead us into using HashiCorp’s &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; to manage each of these providers.&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">I am not going to lie, I am a big fan of AWS. I have been using AWS on and off for nearly 2 years now. I’ve done the training for both the AWS Solutions Architect Associate and SysOps Associate (although not got a certification yet). Shout out to acloud.guru.</summary></entry><entry><title type="html">SaltStack at Home, Initial Thoughs</title><link href="http://localhost:4000/2017/05/21/saltstack-at-home-initial-thoughs.html" rel="alternate" type="text/html" title="SaltStack at Home, Initial Thoughs" /><published>2017-05-21T15:29:02+01:00</published><updated>2017-05-21T15:29:02+01:00</updated><id>http://localhost:4000/2017/05/21/saltstack-at-home-initial-thoughs</id><content type="html" xml:base="http://localhost:4000/2017/05/21/saltstack-at-home-initial-thoughs.html">&lt;p&gt;&lt;em&gt;“Cloud servers are cattle, not pets!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I have been working with configuration management for a while, recently I have been switching between Ansilble and Salt Stack. After creating a Salt Stack for a previous employer in AWS (see below diagram), I have fallen for this configuration management system. As you may have noted, I am using Python based, YAML configured systems because this is where I am comfortable. These systems are easily extendable, the configuration files are easy to read for anyone and they are both awesome. Salt, ultimately, has won over purely based on requirements to support my previous employer’s legacy applications. I’ve become very familiar with it and I am sticking with what I am comfortable with.&lt;/p&gt;

&lt;p&gt;Why do we use configuration management? The main answers in my mind are automation, repeatability and accountability. If I need to create a new machine (either because a previous one has failed or I need extra compute capacity), I don’t have to do a lot. I bootstrap, Config Management does the rest. I can do this to one machine or a hundred machines and the resulting output will always be the same. I can track all configuration changes in version control systems such as git, so there is a level of accountability for change.&lt;/p&gt;

&lt;p&gt;Another final point to mention is that configuration management is idempotent. What does &lt;em&gt;idempotent&lt;/em&gt; mean? An example of an idempotent process is washing your dog, wash him once or wash him twice, the outcome is the same: a clean dog. The opposite of an idempotent process is an incremental process, I feed the dog once he is healthy, feed him twice and he gets fat. I can apply a configuration once or a hundred times and the output is always the same. This isn’t always the case with custom shell scripts used for provisioning, these are often written to be run once.&lt;/p&gt;

&lt;h2 id=&quot;roles-based-on-hostname&quot;&gt;Roles based on hostname&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/SaltTargeting.png&quot; alt=&quot;Salt Targeting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My previous employers legacy cloud applications used to be configured with CFEngine3. Arguably not the easiest system to work with, but it was one of the first configuration management systems available. As our main cloud environment hosted multiple customers, each host with a different role, a convenient way of tracking the role and cost centre for each VM was vital. This needs to be machine readable and human readable due to the sheer scale of VMs in use. With CFEngine3 it was identified the best way of assigning a role to a VM was via the hostname - this was useful for us human SysAdmins/Developers too because we could easily find what we needed. Moving to AWS, it made sense to keep this convention but find a way of applying it into SaltStack.&lt;/p&gt;

&lt;p&gt;From our naming convention, we had the ability to automatically set up grains to help in targeting our systems for configuration.&lt;/p&gt;

&lt;p&gt;When a minion connects to our Salt Master, the machine is seen as a ‘base’ configuration - the &lt;em&gt;initial&lt;/em&gt; highstate run is to perform the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the grains of the minion based on hostname&lt;/li&gt;
  &lt;li&gt;Add the host to a pool&lt;/li&gt;
  &lt;li&gt;Install base packages and configuration that apply to ALL hosts&lt;/li&gt;
  &lt;li&gt;Set up a cron job to check for configuration updates hourly&lt;/li&gt;
  &lt;li&gt;Set up an &lt;code class=&quot;highlighter-rouge&quot;&gt;at&lt;/code&gt; task to perform the next highstate run.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the initial highstate has been called, the minion will have it’s configuration applied from one of the 3 pools (dev/staging/prod).&lt;/p&gt;

&lt;p&gt;Below is a partial extract of the configuration showing &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; (which was our initial configuration before grains had been established from hostname), and our &lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt; with a few sample roles within our infrastructure.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.at&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.cron&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.grains&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.cron&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.grains&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.ntp&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_client:infra&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_role:fileserver'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fileserver.nginx&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_client:infra&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_role:blogs'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.ssl&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blog.users&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blog.nginx&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;blog.docker&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_client:infra&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_role:automation'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.ssl&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;automation.docker&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;automation.docker.api&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;automation.docker.codereviewbot&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_client:infra&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;G@g_role:pypirepo'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;defaults.ssl&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pypi.users&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pypi.nginx&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pypi.docker&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s say we have the host &lt;code class=&quot;highlighter-rouge&quot;&gt;euw01-infra-prodautomation001.aws.domain.co.uk&lt;/code&gt; - following the initial salt highstate run, we now have a host that will be configured from &lt;code class=&quot;highlighter-rouge&quot;&gt;prod: 'G@g_client:infra and G@g_role:automation&lt;/code&gt;. The following states will be applied:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;defaults.ssl (our SSL configuration including access to SSL repository)&lt;/li&gt;
  &lt;li&gt;automation.docker (Installation of docker for automation servers)&lt;/li&gt;
  &lt;li&gt;automation.docker.api (Our API for CLI tools to interact with AWS during deployment).&lt;/li&gt;
  &lt;li&gt;automation.docker.codereviewbot (Our bot for issuing code review requests)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And just like that, within 10 minutes of spinning up an EC2 in AWS it can be configured precisely as needed based purely on the hostname of the server.&lt;/p&gt;

&lt;h2 id=&quot;home-use&quot;&gt;Home Use&lt;/h2&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;Having invested a lot of time in Salt I decided that I should probably continue to practice what I preach. Having previously experienced data loss at home first hand, having to restore from backups and needing to install all my applications all over again, I thought it was time I actually used this great tool for keeping my own systems configured.&lt;/p&gt;

&lt;p&gt;I also (on the odd occasion) forget to apply the odd security update. &lt;em&gt;Who doesn’t&lt;/em&gt;. My Salt configuration will ensure that key security updates are done on time.&lt;/p&gt;

&lt;p&gt;Another key motivator is to continue that pets vs. cattle mentality to my own infrastructure, where I should be able to re-create my desktop environment, or my Raspberry Pi Bastion fairly quickly if it fails for whatever reason.&lt;/p&gt;

&lt;p&gt;I would like to note that you can run Salt decentralized, however I have chosen to keep it centralized so that the configuration is always at the same version across all machines.&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/05/HomeSaltStack.png&quot; alt=&quot;Home Salt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over the space of 2 months (a couple of hours every weekend), I’ve created a Salt configuration that describes the main devices in my personal infrastructure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Desktop computer&lt;/li&gt;
  &lt;li&gt;Raspberry Pi Bastion/VPN Server&lt;/li&gt;
  &lt;li&gt;Webserver (running Ghost on Docker)&lt;/li&gt;
  &lt;li&gt;Bastion in the public subnet of my AWS lab.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of the above is described in a Vagrantfile that can be spun up and trashed as a development environment for testing before deploying to production.&lt;/p&gt;

&lt;p&gt;I do not have a naming scheme for hostnames that can be programmatically dealt with, so I have had to create a map that takes hostname and applies the appropriate grains to that minion. These grains then dictate what the configuration of the minion will be. I am still using the same definitions as before: region, cloud, pool, role, etc.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# hosts.map&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'grains.filter_by'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]({&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'helios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'region'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'euw02'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'cloud'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aws'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'prod'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bastion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'icarus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'region'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'cloud'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'lan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'prod'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bastion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'daedalus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'region'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'cloud'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'lan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'prod'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'desktop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'morpheus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'region'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'lon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'cloud'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'digitalocean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'prod'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'webserver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;'unknown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'region'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'unknown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'cloud'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'unknown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'base'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'role'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'generic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hostname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'unknown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;problems-lessons-learnt&quot;&gt;Problems, lessons learnt&lt;/h3&gt;

&lt;p&gt;This is my initial attempt at configuration management at home. Upon reflection I have discovered the following issues that will affect my decisions going forward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A 512 MB RAM Rasberry Pi Model B is underpowered for running Salt-minion and a VPN at the same time.&lt;/li&gt;
  &lt;li&gt;A Salt Master ideally needs at least 1 GB RAM.&lt;/li&gt;
  &lt;li&gt;Vagrant is OK for testing, but you cannot test a Rasbperry Pi’s performance in VirtualBox.&lt;/li&gt;
  &lt;li&gt;Pillars are vital, and once Salt becomes more friendly with HashiCorp’s Vault this will become much better for storing secrets - especially when backed with something like S3 storage. I am currently using GPG2 encrypted pillars which is slow and manual to manage.&lt;/li&gt;
  &lt;li&gt;Configuration management tools are aimed at server markets, desktop environments require a lot more work to configure to your liking. Often it is easier to create a base config and further config (wallpapers, GNOME plugins) can be done to user taste.&lt;/li&gt;
  &lt;li&gt;Salt has got some limits on minion OS support. openSUSE doesn’t seem to work fantastically for the latest release.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will continue to work with Salt and see where I can make performance improvements and tighten my configuration, but I might resort to adopting Ansible for reasons I will explain at a later date.&lt;/p&gt;

&lt;p&gt;Going forward I can test the effectiveness of my configuration management by performing some infrastructure changes and restructuring. The changes I am going to test will involve:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Changing my Raspberry Pi bastion to run OpenBSD/FreeBSD, it will be interesting to see how Salt handles either of these OS.&lt;/li&gt;
  &lt;li&gt;Re-creating my web server with the exact configuration I have in configuration management.&lt;/li&gt;
  &lt;li&gt;Updating my Debian 8 desktop to Debian 9 or moving to Ubuntu once GNOME is mainstream (or just going for UbuntuGNOME 16.04).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At a later date (once my configuration is more “stable”) I shall release the source code to GitHub.&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">“Cloud servers are cattle, not pets!”</summary></entry><entry><title type="html">Silence</title><link href="http://localhost:4000/2017/04/03/silence.html" rel="alternate" type="text/html" title="Silence" /><published>2017-04-03T19:10:48+01:00</published><updated>2017-04-03T19:10:48+01:00</updated><id>http://localhost:4000/2017/04/03/silence</id><content type="html" xml:base="http://localhost:4000/2017/04/03/silence.html">&lt;p&gt;Back soon, just escaped a sticky situation…&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">Back soon, just escaped a sticky situation…</summary></entry></feed>