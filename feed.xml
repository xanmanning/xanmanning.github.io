<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-09-14T11:28:43+01:00</updated><id>http://localhost:4000/</id><title type="html">Xan Manning</title><subtitle>Ramblings of a Linux geek and cloud fanatic dabbling in DevOps!</subtitle><author><name>Xan Manning</name></author><entry><title type="html">2019, not a good year.</title><link href="http://localhost:4000/2019/09/14/not-a-good-year.html" rel="alternate" type="text/html" title="2019, not a good year." /><published>2019-09-14T11:02:24+01:00</published><updated>2019-09-14T11:02:24+01:00</updated><id>http://localhost:4000/2019/09/14/not-a-good-year</id><content type="html" xml:base="http://localhost:4000/2019/09/14/not-a-good-year.html">&lt;p&gt;If you have stumbled upon this site from some articles I have written then tried
to find new stuff, you may have noticed that I haven’t posted a lot recently.
There are many reasons for this, but the main one is that I just don’t feel
like it.&lt;/p&gt;

&lt;p&gt;I’m not going to go into too much detail, there is a lot of private stuff going
on but it feels that all of the luck we have had this year has been bad luck.&lt;/p&gt;

&lt;p&gt;My wife and I have had a number of health issues, our families have been
subject to some serious health issues. We have lost a few beloved members.
In the middle of all of this, we’ve had a car stolen from off of our drive on
the birthday of one of our lost loved ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote, I will be publishing an RCA for our car theft. I’ll explain why
wireless security cameras such as smart doorbells are absolutely pointless!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Needless to say, when I get free time, I don’t really want to ‘automate’, code
nor write.&lt;/p&gt;

&lt;p&gt;Don’t despair though, I am always doing daft things with computers and the
cloud. Mostly in Azure at the minute (no, I haven’t sold out to Microsoft).&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of an encrypted RAID5 with a RAID1 bcache, because why
not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2019/09/layered-block-devices.png&quot; alt=&quot;Silly Block Device setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are having a hard year and want to feel good by donating to good causes,
here are two charities worth checking out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mndassociation.org/&quot;&gt;Motor Neurone Disease Association&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cancerresearchuk.org/&quot;&gt;Cancer Research UK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xan Manning</name></author><summary type="html">If you have stumbled upon this site from some articles I have written then tried to find new stuff, you may have noticed that I haven’t posted a lot recently. There are many reasons for this, but the main one is that I just don’t feel like it.</summary></entry><entry><title type="html">Ansible-lint - Rule 306</title><link href="http://localhost:4000/2019/03/21/ansible-lint-rule-306.html" rel="alternate" type="text/html" title="Ansible-lint - Rule 306" /><published>2019-03-21T17:31:11+00:00</published><updated>2019-03-21T17:31:11+00:00</updated><id>http://localhost:4000/2019/03/21/ansible-lint-rule-306</id><content type="html" xml:base="http://localhost:4000/2019/03/21/ansible-lint-rule-306.html">&lt;p&gt;If you are like me you like to keep your scripting as safe as possible when
running against a production system. Sometimes my bash scripts can be a bit
overkill, but it’s better to be safe than sorry.&lt;/p&gt;

&lt;p&gt;It is therefore worth mentioning an update to &lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-lint&lt;/code&gt; shipped in 4.1.0
which has added the following rule:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[306] Shells that use pipes should set the pipefail option&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Without the pipefail option set, a shell command that implements a pipeline
can fail and still return 0. If any part of the pipeline other than the
terminal command fails, the whole pipeline will still return 0, which may
be considered a success by Ansible. Pipefail is available in the bash shell.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– Source: &lt;a href=&quot;https://docs.ansible.com/ansible-lint/rules/default_rules.html&quot;&gt;https://docs.ansible.com/ansible-lint/rules/default_rules.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is actually a really good idea when automating shell tasks with the use of
pipes. In Ansible we should try and avoid using shell tasks where possible, but
it is sometimes unavoidable. So what does that actually mean in real life?&lt;/p&gt;

&lt;p&gt;Let’s consider a simple shell script that demonstrates the problem:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This task should fail...&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: FAIL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: PASS&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This task should pass...&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: FAIL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: PASS&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run it, we would expect the &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to cause a “FAIL”, however…&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ xmanning@dreadfort:/tmp ] $ ./pipefail_test.sh
This task should fail...
Task: PASS
This task should pass...
Task: PASS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We get two “PASS” results! Why you ask? This is because whilst the &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;
command produces a return code of 1, the &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; after the pipe exits with a
return of 0.&lt;/p&gt;

&lt;p&gt;Ansible will see this as a successful shell task, and really it probably is not.&lt;/p&gt;

&lt;p&gt;So we use the bash builtin option &lt;code class=&quot;highlighter-rouge&quot;&gt;set -o pipefail&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; pipefail

&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This task should fail...&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: FAIL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: PASS&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This task should pass...&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: FAIL&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Task: PASS&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now lets test again:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ xmanning@dreadfort:/tmp ] $ ./pipefail_test.sh
This task should fail...
Task: FAIL
This task should pass...
Task: PASS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ahhh, that’s better!&lt;/p&gt;

&lt;p&gt;So how do we put that into our Ansible? The annoying thing about some of these
lint rules is that your playbooks and roles will fail but there are no examples
of how best to fix them.&lt;/p&gt;

&lt;p&gt;Here is one of the ways of passing the test and making your shell tasks safer,
ensure that you add &lt;code class=&quot;highlighter-rouge&quot;&gt;set -o pipefail&lt;/code&gt; to the beginning of all shell tasks that
use pipes.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ensure a list of IPs is captured from /etc/hosts&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;set -o pipefail &amp;amp;&amp;amp; \&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;grep -E &quot;^[0-9a-f]&quot; /etc/hosts | awk '{ print $1 }'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;etc_hosts_iplist&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take note that you need to specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;executable: /bin/bash&lt;/code&gt; as Ansible will
likely use &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; which does not support the &lt;code class=&quot;highlighter-rouge&quot;&gt;pipefail&lt;/code&gt; option and the task
will just fail.&lt;/p&gt;

&lt;p&gt;Having used &lt;code class=&quot;highlighter-rouge&quot;&gt;set -o pipefail &amp;amp;&amp;amp;&lt;/code&gt; at the beginning of the command, should there
be any problem with the &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; command then the task will now show
as &lt;code class=&quot;highlighter-rouge&quot;&gt;Failed&lt;/code&gt; whereas previously the task would show as &lt;code class=&quot;highlighter-rouge&quot;&gt;Changed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And just like that you have explored safer shell scripting through Ansible.&lt;/p&gt;

&lt;p&gt;To read more about safer bash scripts, see
&lt;a href=&quot;https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/&quot;&gt;Tom Van Eyck’s article&lt;/a&gt;&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">If you are like me you like to keep your scripting as safe as possible when running against a production system. Sometimes my bash scripts can be a bit overkill, but it’s better to be safe than sorry.</summary></entry><entry><title type="html">k3s - My first public Ansible Role</title><link href="http://localhost:4000/2019/03/09/k3s-my-first-public-ansible-role.html" rel="alternate" type="text/html" title="k3s - My first public Ansible Role" /><published>2019-03-09T21:02:42+00:00</published><updated>2019-03-09T21:02:42+00:00</updated><id>http://localhost:4000/2019/03/09/k3s-my-first-public-ansible-role</id><content type="html" xml:base="http://localhost:4000/2019/03/09/k3s-my-first-public-ansible-role.html">&lt;p&gt;Today marks the first time I have dared to release an Ansible role to Ansible
Galaxy. It’s not my first role and it certainly isn’t my best, unfortunately
my best role to date - a role for configuring Tinc - has (kind of) been donated
to the company I work for.&lt;/p&gt;

&lt;p&gt;So without further ado, please may I introduce…&lt;/p&gt;

&lt;h2 id=&quot;k3s&quot;&gt;k3s&lt;/h2&gt;

&lt;p&gt;For anyone who has been following the news recently, Rancher Labs released K3s -
also known as “Lightweight Kubernetes” and you can download it from
&lt;a href=&quot;https://k3s.io/&quot;&gt;https://k3s.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even better, if you like to use Ansible, you can download and use my role to
build your own k3s cluster.&lt;/p&gt;

&lt;p&gt;Ansible Galaxy: &lt;a href=&quot;https://galaxy.ansible.com/xanmanning/k3s&quot;&gt;xanmanning.k3s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install: &lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-galaxy install xanmanning.k3s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It’s nothing special but it will probably get you started with k3s.&lt;/p&gt;

&lt;h3 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;I’m not going to have a lot of time to maintain the role, though I will try
my best. K3s is also not yet a v1.0 release and will likely change a lot so the
role will probably break in the near future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Hacking!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">Today marks the first time I have dared to release an Ansible role to Ansible Galaxy. It’s not my first role and it certainly isn’t my best, unfortunately my best role to date - a role for configuring Tinc - has (kind of) been donated to the company I work for.</summary></entry><entry><title type="html">Snippet - List tenants of an SAP HANA MDC</title><link href="http://localhost:4000/2018/11/11/snippet-list-hana-mdc-tenants.html" rel="alternate" type="text/html" title="Snippet - List tenants of an SAP HANA MDC" /><published>2018-11-11T12:31:42+00:00</published><updated>2018-11-11T12:31:42+00:00</updated><id>http://localhost:4000/2018/11/11/snippet-list-hana-mdc-tenants</id><content type="html" xml:base="http://localhost:4000/2018/11/11/snippet-list-hana-mdc-tenants.html">&lt;p&gt;I thought I would share a snippet of code that I have found useful for
discovering all of the SIDs and Tenants running on an SAP HANA system running
with Multitenant Database Containers (MDC). If you are running HANA 2.0 this
is your default operating mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I do not consider myself a HANA expert, whilst day-to-day I
work with HANA systems I focus more on OS level operations and automation.&lt;/p&gt;

&lt;p&gt;I have found occasion to find out all the instances running on a server, what
their SIDs are and any tenants that may exist. There’s an assumption that you
will find your HANA installation in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/sap&lt;/code&gt; - it is here you will find
where instances are installed. You can print all the SIDs from this directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Find:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   maxdepth = 1, we only want to find stuff in this directory level.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   regextype = sed, we will use `sed` regular expressions to find our SIDs.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   regex = '.*/[A-Z0-9]\{3\}', a SID is a 3 uppercase alphanumeric characters.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   printf = '%f\n', just print the filename.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
find /usr/sap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-regextype&lt;/span&gt; sed &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.*/[A-Z0-9]\{3\}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%f\n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We should expect output such as below:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XMD
XMQ
XMP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we have a list of SIDs with our &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command, we can get the instance
number from each SID. Conveniently the instance number is found appended to the
end of a directory prefixed with “HDB”, eg: HDB00 for instance 00.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SIDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find /usr/sap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-regextype&lt;/span&gt; sed &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.*/[A-Z0-9]\{3\}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%f\n'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;sid &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIDS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; : &quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Find:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#   Same as before, but this time we are using a different regex.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#   regex = '.*/HDB[0-9]\{2\}', find all directories prefixed with HDB&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#       these should be suffixed with 2 numbers.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    find &lt;span class=&quot;s2&quot;&gt;&quot;/usr/sap/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-regextype&lt;/span&gt; sed &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.*/HDB[0-9]\{2\}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%f\n'&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/HDB//'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our expected output from the above should be a SID and it’s instance number:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XMD : 10
XMQ : 05
XMP : 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can look to see if it is an MDC and check how many tenants each instance
has. Conveniently there is a file that holds information about tenant
containers on the filesystem. You’ll likely find it here:
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/sap/${sid}/SYS/global/hdb/mdc/databases.lst&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SIDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find /usr/sap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-regextype&lt;/span&gt; sed &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.*/[A-Z0-9]\{3\}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%f\n'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;sid &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIDS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; : &quot;&lt;/span&gt;

    find &lt;span class=&quot;s2&quot;&gt;&quot;/usr/sap/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-maxdepth&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-regextype&lt;/span&gt; sed &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-regex&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.*/HDB[0-9]\{2\}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-printf&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%f\n'&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s/HDB//'&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;DBLIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/sap/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/SYS/global/hdb/mdc/databases.lst&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DBLIST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Grep 1:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   Remove all comments out of the file&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Grep 2:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   Look for a line beginning with a SID style string, it should end&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   with a 'yes' to signify it is active. Fields are delimited with&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   colons (:)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Awk:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   Use the colon delimeter (:) to select and print the first field.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Sed 1:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   Prefix each line with indentation and a hyphen&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Sed 2:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#   Suffix each tenant with the SID.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#'&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DBLIST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Ei&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^[A-Z0-9]{3}:.*:yes$'&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        awk &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'{ print $1 }'&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        sed &lt;span class=&quot;s1&quot;&gt;'s/^/  - /'&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        sed &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now we look for tenants for our database. The expected output should be
something like the below:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XMD : 10
  - TD0@XMD
  - TD1@XMD
XMQ : 05
  - TD0@XMQ
XMP : 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s not the most elegant output but you can get some basic information this
way. You may also find it useful for gathering information on a system that
you do not have SYSTEM user access to.&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">I thought I would share a snippet of code that I have found useful for discovering all of the SIDs and Tenants running on an SAP HANA system running with Multitenant Database Containers (MDC). If you are running HANA 2.0 this is your default operating mode.</summary></entry><entry><title type="html">Systemd-resolved, Flushing DNS in Ubuntu 18.04 (and other distributions).</title><link href="http://localhost:4000/2018/10/18/systemd-resolved-in-ubuntu.html" rel="alternate" type="text/html" title="Systemd-resolved, Flushing DNS in Ubuntu 18.04 (and other distributions)." /><published>2018-10-18T18:21:01+01:00</published><updated>2018-10-18T18:21:01+01:00</updated><id>http://localhost:4000/2018/10/18/systemd-resolved-in-ubuntu</id><content type="html" xml:base="http://localhost:4000/2018/10/18/systemd-resolved-in-ubuntu.html">&lt;p&gt;Today I’ve been playing with static DNS on my router, sadly Miktotik doesn’t
support “DNS Doctoring” and it doesn’t look like Ubiquiti Networks equipment
does either (as of 2018). It’s likely a feature I got spoilt with on a couple
of Cisco routers I had access to.&lt;/p&gt;

&lt;p&gt;Anyway, back to the point. Using Ubuntu 16.04 for a long time on my work laptop
and now CentOS 7 I have been used to working with &lt;code class=&quot;highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt; and how to clear
the cache.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ xmanning@pc-xmann-01: ~ ] $ grep -E &quot;^PRETTY_NAME&quot; /etc/os-release &amp;amp;&amp;amp; sudo ss -pant | grep -E &quot;^LISTEN&quot; | grep :53
PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;
LISTEN     0      5      192.168.122.1:53                       *:*                   users:((&quot;dnsmasq&quot;,pid=2462,fd=6))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On Ubuntu 18.04, and other distributions of course, this has been replaced with
a systemd service called &lt;code class=&quot;highlighter-rouge&quot;&gt;systemd-resolved&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ xmanning@dreadfort:~ ] $ grep -E &quot;^PRETTY_NAME&quot; /etc/os-release &amp;amp;&amp;amp; sudo ss -pant | grep -E &quot;^LISTEN&quot; | grep :53
PRETTY_NAME=&quot;Ubuntu 18.04.1 LTS&quot;
LISTEN      0        128         127.0.0.53%lo:53               0.0.0.0:*        users:((&quot;systemd-resolve&quot;,pid=6977,fd=13))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, to flush! If you’re finding there’s a need to clear the DNS cache here’s
how you do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemd-resolve --flush-caches&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 2:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl restart systemd-resolved&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;man &lt;a href=&quot;http://man7.org/linux/man-pages/man1/systemd-resolve.1.html&quot;&gt;systemd-resolve(1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xan Manning</name></author><summary type="html">Today I’ve been playing with static DNS on my router, sadly Miktotik doesn’t support “DNS Doctoring” and it doesn’t look like Ubiquiti Networks equipment does either (as of 2018). It’s likely a feature I got spoilt with on a couple of Cisco routers I had access to.</summary></entry><entry><title type="html">Remembering HTTPS Authentication in git</title><link href="http://localhost:4000/2018/09/24/https-auth-in-git.html" rel="alternate" type="text/html" title="Remembering HTTPS Authentication in git" /><published>2018-09-24T20:37:48+01:00</published><updated>2018-09-24T20:37:48+01:00</updated><id>http://localhost:4000/2018/09/24/https-auth-in-git</id><content type="html" xml:base="http://localhost:4000/2018/09/24/https-auth-in-git.html">&lt;p&gt;Quick tip for anyone who is wanting git to remember their username/password
when issuing push/pulls to a git repository over HTTPS, run the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config credential.helper store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will remember your username and password by storing in a plaintext file
in &lt;code class=&quot;highlighter-rouge&quot;&gt;${HOME}/.git-credentials&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: Only do this if you know your home directory is secure from
other users!&lt;/p&gt;

&lt;h2 id=&quot;source&quot;&gt;Source&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;git: &lt;a href=&quot;https://git-scm.com/docs/git-credential-store&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;credential-store&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Xan Manning</name></author><summary type="html">Quick tip for anyone who is wanting git to remember their username/password when issuing push/pulls to a git repository over HTTPS, run the following:</summary></entry><entry><title type="html">Dropping the Hyphen!</title><link href="http://localhost:4000/2018/08/31/dropping-the-hyphen.html" rel="alternate" type="text/html" title="Dropping the Hyphen!" /><published>2018-08-31T19:12:55+01:00</published><updated>2018-08-31T19:12:55+01:00</updated><id>http://localhost:4000/2018/08/31/dropping-the-hyphen</id><content type="html" xml:base="http://localhost:4000/2018/08/31/dropping-the-hyphen.html">&lt;p&gt;You may think I’m mad, but I am going to drop the hyphen in my domain, so very
shortly you will see that instead of visiting
&lt;a href=&quot;https://xan-manning.co.uk&quot;&gt;https://xan-manning.co.uk&lt;/a&gt;, you will be visiting
&lt;a href=&quot;https://xanmanning.co.uk&quot;&gt;https://xanmanning.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why are you doing this, Xan?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, you have probably noticed that pretty much every other vanity domain on
the net is lacking a hyphen between firstname and surname; I’m just following
that convention.&lt;/p&gt;

&lt;p&gt;I’ll keep the ol’ xan-manning.co.uk domain, but it will redirect to
xanmanning.co.uk.&lt;/p&gt;

&lt;p&gt;Sorry folks.&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">You may think I’m mad, but I am going to drop the hyphen in my domain, so very shortly you will see that instead of visiting https://xan-manning.co.uk, you will be visiting https://xanmanning.co.uk.</summary></entry><entry><title type="html">Code to Kubernetes in 15 Minutes</title><link href="http://localhost:4000/2018/08/19/code-to-kubernetes-in-15-minutes.html" rel="alternate" type="text/html" title="Code to Kubernetes in 15 Minutes" /><published>2018-08-19T12:28:48+01:00</published><updated>2018-08-19T12:28:48+01:00</updated><id>http://localhost:4000/2018/08/19/code-to-kubernetes-in-15-minutes</id><content type="html" xml:base="http://localhost:4000/2018/08/19/code-to-kubernetes-in-15-minutes.html">&lt;p&gt;As you may recall, &lt;a href=&quot;/2018/06/23/weekend-deployment.html&quot;&gt;a couple of on-call’s ago&lt;/a&gt;
I started crafting a Kubernetes cluster using Vagrant and Ansible. Well I have
decided to upload my code to GitHub!&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;You can get the code from here:
&lt;a href=&quot;https://github.com/xanmanning/vagrant-kubernetes-cluster&quot;&gt;https://github.com/xanmanning/vagrant-kubernetes-cluster&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;heres-what-gets-deployed&quot;&gt;Here’s what gets deployed!&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;An NFS server for Persistent Volumes&lt;/li&gt;
  &lt;li&gt;3 Kubernetes Nodes (1 master, 2 workers). This can be increased in Vagrant.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/08/cluster-diagram.png&quot; alt=&quot;K8s Cluster Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;demonstration&quot;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;In the below demo I go from sourcecode, to a 3 node cluster + storage in 15
minutes. I then deploy a MySQL Stateful Set which takes us up to 22 minutes.&lt;/p&gt;

&lt;p&gt;I’m always amazed how I can go from 650Kb of code to 4 virtual machines running
a test Kubernetes Cluster.&lt;/p&gt;

&lt;p&gt;It’s long and there’s a lot of pauses.&lt;/p&gt;

&lt;script src=&quot;https://asciinema.org/a/197075.js&quot; id=&quot;asciicast-197075&quot; async=&quot;&quot;&gt;&lt;/script&gt;</content><author><name>Xan Manning</name></author><summary type="html">As you may recall, a couple of on-call’s ago I started crafting a Kubernetes cluster using Vagrant and Ansible. Well I have decided to upload my code to GitHub!</summary></entry><entry><title type="html">Weekend Deployment, Upskilling</title><link href="http://localhost:4000/2018/06/23/weekend-deployment.html" rel="alternate" type="text/html" title="Weekend Deployment, Upskilling" /><published>2018-06-23T12:28:48+01:00</published><updated>2018-06-23T12:28:48+01:00</updated><id>http://localhost:4000/2018/06/23/weekend-deployment</id><content type="html" xml:base="http://localhost:4000/2018/06/23/weekend-deployment.html">&lt;p&gt;I’ve got a weekend to myself, it’s not uncommon, but this weekend the wife has
gone away to watch Foo Fighters. I’m not jealous, I’m not fond of crowds and I
don’t like travelling to London (or down South in general). When I win the
lottery and can afford to have private gigs for my family then all will be cool.&lt;/p&gt;

&lt;p&gt;So yes, on a weekend when I am on my own I can be a bit of a sad nut, especially
on weekends like this one when I will be starting a week of on-call for work. I
often find on-call quite traumatic, particularly as I can be a bit of a
&lt;em&gt;“Sev 1 Magnet”&lt;/em&gt; as my colleagues would describe me. This is another story,
which I will discuss at some later date.&lt;/p&gt;

&lt;p&gt;To try and keep myself distracted in these times of heightened anxiety,
maintaining my sanity and avoiding exacerbating an existing health concern I
like to use the time to upskill.&lt;/p&gt;

&lt;p&gt;Now that I’ve had my early morning walk and exercise, I have decided to learn
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; properly. I’ve dabbled with
&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; quite a bit now and some of the tooling around
it but I’ve not had the opportunity to use K8s.&lt;/p&gt;

&lt;p&gt;Being a firm believer of implementing &lt;strong&gt;Infrastructure and Configuration as
Code&lt;/strong&gt;, I’ve decided I’m going to apply the rigour of everything I do being
committed to a git repository as either &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt;
or &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; code, sat beneath the Kubernetes
deployment YAML.&lt;/p&gt;

&lt;p&gt;Obviously this may take a few weekends for me to progress but I’m that much of
a sad nut when I’ve got a weekend to myself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/06/dreadfort_large.png&quot;&gt;&lt;img src=&quot;/images/2018/06/dreadfort.png&quot; alt=&quot;The command center, Dreadfort&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First thing is first, time to test the deployment of
&lt;a href=&quot;https://github.com/kubernetes/minikube&quot;&gt;Minikube&lt;/a&gt; and
&lt;a href=&quot;https://github.com/kubernetes/kubectl&quot;&gt;Kubectl&lt;/a&gt; in my
&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; environment using Ansible, before
deploying to my “Production” environment and getting started.&lt;/p&gt;

&lt;p&gt;It sounds like overkill, I know, but without this kind of rigour mistakes might
be made that costs me more in time. As we all know, operations time is expensive
and my time is valuable to me.&lt;/p&gt;

&lt;p&gt;I hope to share some of my code as a “playground” repository soon that
demonstrates the process of going from “code + public cloud provider” to
“functioning Kubernetes Cluster”.&lt;/p&gt;</content><author><name>Xan Manning</name></author><summary type="html">I’ve got a weekend to myself, it’s not uncommon, but this weekend the wife has gone away to watch Foo Fighters. I’m not jealous, I’m not fond of crowds and I don’t like travelling to London (or down South in general). When I win the lottery and can afford to have private gigs for my family then all will be cool.</summary></entry><entry><title type="html">Git for Non-Developers</title><link href="http://localhost:4000/2018/05/06/git-for-non-developers.html" rel="alternate" type="text/html" title="Git for Non-Developers" /><published>2018-05-06T15:49:22+01:00</published><updated>2018-05-06T15:49:22+01:00</updated><id>http://localhost:4000/2018/05/06/git-for-non-developers</id><content type="html" xml:base="http://localhost:4000/2018/05/06/git-for-non-developers.html">&lt;p&gt;I have been thinking about this for quite a while, particularly as I am in the
middle of contributing to a project at work to combine our multiple knowledgebases
into a single repository of runbooks.&lt;/p&gt;

&lt;p&gt;We’ve chosen to resolve our fractured information repositories into a central
git repository. Each runbook is written in Markdown.&lt;/p&gt;

&lt;h2 id=&quot;so-why-use-git-on-github-and-markdown&quot;&gt;&lt;em&gt;So why use Git (on GitHub) and Markdown?&lt;/em&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Runbooks live close to the code, eventually commonly used runbooks can
become Ansible playbooks.&lt;/li&gt;
  &lt;li&gt;Markdown is fairly easy to learn, you don’t need to know how to code to
contribute.&lt;/li&gt;
  &lt;li&gt;Markdown is still ledgible when not rendered.&lt;/li&gt;
  &lt;li&gt;Every contributor and consumer has a full copy of the repository offline
so should be able to read their content in a datacenter where there is no
internet connectivity available.&lt;/li&gt;
  &lt;li&gt;Contributors have to follow a workflow that means the content is peer
reviewed before being able to merge into the master branch.&lt;/li&gt;
  &lt;li&gt;Every document is versioned and changes audited with &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Multiple people can contribute to a single runbook prior to publication
and the merging of their work is handled well.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-challenges-have-been-faced&quot;&gt;&lt;em&gt;What challenges have been faced?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Needless to say there is a period of adjustment required. With our knowledge and
experiences “documented” loosly in Google Sites pages, wikis, support tickets,
notes on people’s desks and in our heads - every person has their own workflow
for “documentation”.&lt;/p&gt;

&lt;p&gt;What we need to consider is that the content of this documentation is very
technical in nature and written by some very skilled individuals, but written
by individuals who don’t write a lot of code day-to-day and may not have used
git before. What problems does this cause?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Git has a steep learning curve when starting off, understanding the workflow
takes a significant commitment of time. This time commitment is not easy
to fulfil when working in Operations or Consultancy.&lt;/li&gt;
  &lt;li&gt;Git has its roots in development, after all Linus Torvalds wrote it to
fulfil an SCM role in Linux Kernel Development. The workflows have to be
explained and adapted slightly differently for writting documentation.&lt;/li&gt;
  &lt;li&gt;Tooling is tricky, GUIs can be a bit hit and miss with the level of control
over your project. CLI isn’t as easy to set up on Windows as on Linux/MacOS.&lt;/li&gt;
  &lt;li&gt;Rendering of Markdown locally can differ from the rendering on GitHub.&lt;/li&gt;
  &lt;li&gt;There are a lot of steps in the process to publish a document.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-can-we-do-to-make-things-easier&quot;&gt;&lt;em&gt;What can we do to make things easier?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;William Chia, GitLab, presented “Empowering non-developers to use Git” at
Git Merge 2018. Chia reduced the problem down into 3 requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Something to version&lt;/li&gt;
  &lt;li&gt;Somewhere to publish&lt;/li&gt;
  &lt;li&gt;Some way to stop explosions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ve already established points 1. and 2. - We are versioning runbooks and then
we are publishing to GitHub. What we have started looking at but not perfected
is point 3.&lt;/p&gt;

&lt;p&gt;Point 3. is currenlty being managed by manual steps, which is fine, but it takes
a lot of engineer time and commitment. Mistakes can also be made and a non-consistent,
“ad-hoc” process is used.&lt;/p&gt;

&lt;p&gt;How can we start delving into stopping explosions? We can reduce the engineer hours
involved in publishing content by
&lt;a href=&quot;https://github.com/markdownlint/markdownlint&quot;&gt;linting&lt;/a&gt;, &lt;a href=&quot;http://aspell.net/&quot;&gt;spellchecking&lt;/a&gt;*, ensuring the correct template was used,
etc.&lt;/p&gt;

&lt;p&gt;This becomes part of our Continuous Integration (CI) strategy, and starts to
drive the behaviours for writing more consistent runbook entries (in sourcecode
and content).&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;* spellchecking is not always easy in technical documents&lt;/em&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-do-we-go-once-we-have-implemented-continuous-integration&quot;&gt;&lt;em&gt;Where do we go once we have implemented continuous integration?&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;As mentioned above with point 3. we are starting to look at continuous integration
to stop our explosions.&lt;/p&gt;

&lt;p&gt;We can actually re-iterate on the problem by looking back at point 2. and how
we publish. We are relying on GitHub as a platform to publish on, making use of
the markdown to HTML conversion that goes on in the background against a GitHub
repository.&lt;/p&gt;

&lt;p&gt;This is great, but not everyone in the organisation will use GitHub to consume
content. How might we tackle this?&lt;/p&gt;

&lt;p&gt;GitHub actually supports hosting websites (like this one), written in markdown
but presented in converted HTML. This is done using a Static Site Generator
(SSG), such as &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; or
&lt;a href=&quot;https://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are even SSGs that are designed for formatting technical documentation.
Take a look at &lt;a href=&quot;http://www.sphinx-doc.org/en/master/&quot;&gt;Sphinx&lt;/a&gt; or
&lt;a href=&quot;http://www.mkdocs.org/&quot;&gt;MkDocs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So there are tools to build our markdown as a site, whilst we are already
checking the sourcecode with our CI solution, we can then start deploying it
automatically. So begins our possible new Continuous Delivery (CD) strategy.&lt;/p&gt;

&lt;h2 id=&quot;video-on-youtube&quot;&gt;Video on YouTube&lt;/h2&gt;

&lt;p&gt;Below is the full video of William Chia’s talk, which quite accurately describes
the issues face when non-technical (or even non-development) users are asked to
work in git. The video gives a taste of the solutions used at GitLab.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pY5i0Io86UQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Xan Manning</name></author><summary type="html">I have been thinking about this for quite a while, particularly as I am in the middle of contributing to a project at work to combine our multiple knowledgebases into a single repository of runbooks.</summary></entry></feed>